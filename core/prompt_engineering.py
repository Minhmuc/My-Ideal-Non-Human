from langchain_core.prompts import ChatPromptTemplate,PromptTemplate
from core.prompts import get_prompt
from core.models import model
from data.realtime_data import get_current_datetime, get_weather


personality = get_prompt("system")
def clean_input(text: str) -> str:
    return text.strip()

# ===== Should search on web =====
_search_prompt = ChatPromptTemplate.from_template(
    "C√¢u sau c√≥ c·∫ßn t√¨m ki·∫øm th√¥ng tin tr√™n web kh√¥ng? Tr·∫£ l·ªùi ch√≠nh x√°c 'c√≥' n·∫øu ng∆∞·ªùi d√πng b·∫£o tra c·ª©u, t√¨m ki·∫øm, wiki.\nC√¢u h·ªèi: {question}"
)

def should_search(question: str) -> bool:
    result = (_search_prompt | model).invoke({"question": question})
    return "c√≥" in result.lower()

exit_intent_confidence_prompt = PromptTemplate(
    input_variables=["user_input"],
    template="""
nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë√°nh gi√° m·ª©c ƒë·ªô √Ω ƒë·ªãnh k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n c√¢u h·ªç v·ª´a nh·∫≠p.

V√≠ d·ª•:
- Ng∆∞·ªùi d√πng n√≥i: "C·∫£m ∆°n nh√©" ‚Üí th·∫•p
- Ng∆∞·ªùi d√πng n√≥i: "T·∫°m bi·ªát, h·∫πn g·∫∑p l·∫°i" ‚Üí cao
- Ng∆∞·ªùi d√πng n√≥i: "Th·∫ø th√¥i" ‚Üí trung b√¨nh
- Ng∆∞·ªùi d√πng n√≥i: "Th·∫ø l√† xong r·ªìi nh·ªâ" ‚Üí trung b√¨nh
- Ng∆∞·ªùi d√πng n√≥i: "Ok c·∫£m ∆°n, m√¨nh tho√°t ƒë√¢y" ‚Üí cao

D·ª±a v√†o c√¢u ng∆∞·ªùi d√πng d∆∞·ªõi ƒë√¢y, h√£y tr·∫£ l·ªùi ƒë√∫ng m·ªôt trong ba m·ª©c: "cao", "trung b√¨nh", "th·∫•p".

N·∫øu ng∆∞·ªùi d√πng ch·ªâ chat nh·ªØng t·ª´ kh√≥a sau:"shutdown", "quit",  "exit", disconnect" th√¨ t√≠nh l√† m·ª©c: "cao"
Kh√¥ng gi·∫£i th√≠ch. Ch·ªâ tr·∫£ l·ªùi 1 t·ª´.

Ng∆∞·ªùi d√πng n√≥i: "{user_input}"
"""
)


def exit_intent_confidence(user_input: str) -> str:
    return (exit_intent_confidence_prompt | model).invoke({"user_input": user_input}).lower()


weather_intent_prompt = PromptTemplate.from_template(
    """
C√¢u h·ªèi: {question}
nhi·ªám v·ª• c·ªßa b·∫°n l√† x√°c ƒë·ªãnh xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn th·ªùi ti·∫øt hay kh√¥ng.
Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng m·ªôt t·ª´: "c√≥" ho·∫∑c "kh√¥ng".

V√≠ d·ª•:
- "H√¥m nay H√† N·ªôi c√≥ m∆∞a kh√¥ng?" ‚Üí c√≥
- "Th·ªùi ti·∫øt ·ªü S√†i G√≤n nh∆∞ n√†o?" ‚Üí c√≥
- "M·ªü nh·∫°c l√™n gi√∫p t√¥i" ‚Üí kh√¥ng
- "T√¥i mu·ªën bi·∫øt th·ªùi ti·∫øt ·ªü Hu·∫ø" ‚Üí c√≥
- "B·∫°n t√™n l√† g√¨?" ‚Üí kh√¥ng
- "D·ª± b√°o m∆∞a ·ªü ƒê√† N·∫µng" ‚Üí c√≥
- "ƒêang n√≥ng qu√° tr·ªùi!" ‚Üí c√≥
- "M·ªü tr√¨nh duy·ªát" ‚Üí kh√¥ng
- "nhi·ªát ƒë·ªô h√¥m nay" ‚Üí c√≥
Tr·∫£ l·ªùi:
"""
)


def is_weather_intent(question: str) -> bool:
    return "c√≥" in (weather_intent_prompt | model).invoke({"question": question}).lower()

extract_location_prompt = PromptTemplate.from_template(
    "C√¢u h·ªèi: {question}\n"
    "ƒê·ªãa ƒëi·ªÉm ƒë∆∞·ª£c nh·∫Øc t·ªõi trong c√¢u h·ªèi l√† g√¨? ch·ªâ tr·∫£ l·ªùi ch√≠nh x√°c t√™n ƒë·ªãa ƒëi·ªÉm. N·∫øu kh√¥ng c√≥ th√¨ tr·∫£ l·ªùi ch√≠nh x√°c 'kh√¥ng c√≥' kh√¥ng tr·∫£ l·ªùi th√™m."
)

extract_location_chain = extract_location_prompt | model

def extract_location_from_question(question: str) -> str:
    location = extract_location_chain.invoke({"question": question}).strip()
    if location.lower() in ["kh√¥ng c√≥", "none", ""]:
        return "Hanoi"
    return location


date_time_intent_prompt = PromptTemplate.from_template(
    """
B·∫°n l√† h·ªá th·ªëng ph√¢n lo·∫°i intent. Nhi·ªám v·ª• c·ªßa b·∫°n: X√°c ƒë·ªãnh xem c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng C√ì y√™u c·∫ßu cung c·∫•p th√¥ng tin v·ªÅ NG√ÄY/GI·ªú hi·ªán t·∫°i hay kh√¥ng.

Ch·ªâ tr·∫£ v·ªÅ m·ªôt trong hai t·ª´ kh√≥a:
- "yes"  ‚Üí n·∫øu c√¢u h·ªèi **tr·ª±c ti·∫øp** h·ªèi v·ªÅ ng√†y, gi·ªù, h√¥m nay, h√¥m qua, h√¥m sau, ho·∫∑c gi·ªù hi·ªán t·∫°i ·ªü m·ªôt n∆°i c·ª• th·ªÉ.
- "no"   ‚Üí n·∫øu kh√¥ng li√™n quan.

V√≠ d·ª•:
- "M·∫•y gi·ªù r·ªìi?" ‚Üí yes
- "B√¢y gi·ªù l√† ng√†y bao nhi√™u?" ‚Üí yes
- "H√¥m nay l√† th·ª© m·∫•y?" ‚Üí yes
- "Gi·ªù ·ªü Tokyo l√† m·∫•y gi·ªù?" ‚Üí yes
- "Ng√†y mai t√¥i c√≥ b·∫≠n kh√¥ng?" ‚Üí no
- "H·∫πn gi·ªù gi√∫p t√¥i" ‚Üí no
- "M·ªü nh·∫°c ƒëi" ‚Üí no
- "B·∫°n kh·ªèe kh√¥ng?" ‚Üí no

C√¢u h·ªèi: {question}
Ch·ªâ tr·∫£ v·ªÅ "yes" ho·∫∑c "no".
"""
)


def is_date_time_intent(question: str) -> bool:
    return "yes" in (date_time_intent_prompt | model).invoke({"question": question}).lower()

date_time_prompt = PromptTemplate.from_template("""
Hi·ªán t·∫°i l√† {datetime_info}.
ƒë√¢y l√† b·∫°n: {personality} nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi li√™n quan ƒë·∫øn date time
C√¢u h·ªèi: "{question}"
Tr·∫£ l·ªùi:
"""
)

def date_time_response(question: str, datetime_info: str) -> str:
    datetime_info = get_current_datetime()
    return (date_time_prompt | model).invoke({"datetime_info": datetime_info, "question": question, "personality": personality})

Weather_info_prompt = PromptTemplate.from_template(
"""
Th√¥ng tin v·ªÅ th·ªùi ti·∫øt: {weather_info}.
ƒë√¢y l√† b·∫°n: {personality} nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi li√™n quan ƒë·∫øn th·ªùi ti·∫øt

C√¢u h·ªèi: "{question}"
Tr·∫£ l·ªùi:
""")


def weather_response(question: str, weather_info: str) -> str:
    weather_info= get_weather(location=extract_location_from_question(question))
    return (Weather_info_prompt | model).invoke({"weather_info": weather_info, "question": question, "personality": personality})

# Prompt th√¥ng minh h∆°n
extract_search_query_prompt = PromptTemplate.from_template("""
C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {question}
B·∫°n l√† m·ªôt c√¥ng c·ª• t·∫°o truy v·∫•n t√¨m ki·∫øm Google t·ªëi ∆∞u, n√™n nh·ªõ b·∫°n kh√¥ng ph·∫£i c√¥ng c·ª• tr·∫£ l·ªùi c√¢u h·ªèi n√™n h√£y l√†m ƒë√∫ng nhi·ªám v·ª• c·ªßa m√¨nh, kh√¥ng ƒë∆∞·ª£c b·ªãa.
Ch·ªâ tr·∫£ v·ªÅ DUY NH·∫§T c√¢u truy v·∫•n ng·∫Øn g·ªçn nh·∫•t c√≥ th·ªÉ.
Nhi·ªám v·ª•:
Kh√¥ng gi·∫£i th√≠ch.
Kh√¥ng li·ªát k√™ b∆∞·ªõc.
Kh√¥ng ph√¢n t√≠ch.
Kh√¥ng nh·∫Øc l·∫°i c√¢u h·ªèi.
Kh√¥ng th√™m t·ª´ th·ª´a. Ch·ªâ gi·ªØ l·∫°i c√°c t·ª´ kh√≥a quan tr·ªçng.
N·∫øu ng∆∞·ªùi d√πng vi·∫øt t√™n ri√™ng li·ªÅn nhau (v√≠ d·ª•: "hoanbucon"), KH√îNG ƒë∆∞·ª£c t√°ch t·ª´, k·ªÉ c·∫£ vi·∫øt t·∫Øt c≈©ng ph·∫£i ƒë·ªÉ nguy√™n.
N·∫øu c√¢u h·ªèi m∆° h·ªì, h√£y th√™m t·ª´ kh√≥a g·ª£i √Ω nh∆∞ "l√† ai", "ti·ªÉu s·ª≠", "k·∫øt qu·∫£", "th√¥ng tin", "wiki",‚Ä¶ ho·∫∑c ƒë∆°n gi·∫£n l√† tr·∫£ v·ªÅ y nguy√™n.
CH·ªà tr·∫£ v·ªÅ duy nh·∫•t c√¢u truy v·∫•n, KH√îNG gi·∫£i th√≠ch g√¨ th√™m.
ch·ªâ tr·∫£ v·ªÅ c√¢u truy v·∫•n t√¨m ki·∫øm, kh√¥ng nh·∫Øc l·∫°i c√¢u h·ªèi.
V√≠ d·ª•:
- "D≈©ng CT l√† ai?" ‚Üí "D≈©ng CT"
- "hoanbucon" ‚Üí "hoanbucon"
- "Python vs Java, c√°i n√†o nhanh h∆°n?" ‚Üí "so s√°nh t·ªëc ƒë·ªô Python vs Java"
- "H√¥m nay th·ªùi ti·∫øt H√† N·ªôi th·∫ø n√†o?" ‚Üí "th·ªùi ti·∫øt H√† N·ªôi h√¥m nay"
- "Ai l√† t·ªïng th·ªëng M·ªπ hi·ªán t·∫°i?" ‚Üí "t·ªïng th·ªëng M·ªπ 2025"
- "Messi ghi bao nhi√™u b√†n 2024?" ‚Üí "Messi s·ªë b√†n th·∫Øng 2024"
Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng:
""")

def extract_search_query(question: str) -> str:
    """
    Tr√≠ch xu·∫•t truy v·∫•n Google t·ªëi ∆∞u, g·∫ßn gi·ªëng c√°ch ChatGPT t√¨m ki·∫øm.
    """
    query = (extract_search_query_prompt | model).invoke({"question": question}).strip()
    return query
# test
# if __name__ == "__main__":
#     while True:
#         question = input("Nh·∫≠p c√¢u h·ªèi: ")
#         query = is_date_time_intent(question)
#         print("üîç Truy v·∫•n t√¨m ki·∫øm:", query)
